global:
  default_git_branch: master
  env:
  - name: GO_VERSION
    value: "1.17"
  values:
    cmd:
      run_container@http|template: https://raw.githubusercontent.com/arhat-dev/dukkha-presets/master/templates/cmd-run-container.yml

renderers:
  http:
    enable_cache: true
    cache_max_age: 5h
  env:
    enable_exec: true

tools:
  workflow:
  - name: local
  - name: in-ctr

  golang:
  - name: local
  - name: in-ctr
    cmd@template|http|template: |-
      https://raw.githubusercontent.com/arhat-dev/dukkha-presets/master/
      {{- /* line sep */ -}}
      golang/cmd-in-ctr.yml

workflow:run:
- name: tidy
  env:
  - name: GOPROXY
    value: direct
  - name: GOSUMDB
    value: "off"
  jobs:
  - shell: |-
      go mod tidy
      cd benchmark && go mod tidy

- name: lint
  matrix:
    linter:
    - editorconfig-checker
    - shellcheck
    - yamllint
    - golangci-lint

  jobs:
  - shell@template|http|template: |-
      https://raw.githubusercontent.com/arhat-dev/dukkha-presets/master/
      {{- /* line join*/ -}}
      linter/{{- matrix.linter -}}.tpl
    env:
    - name@template: |-
        {{- matrix.linter | strings.SnakeCase | strings.ToUpper -}}_VERSION
      value@template: |-
        {{- matrix.version | default "" -}}

- name: test
  jobs:
  - task: golang:test(rs, {})
  # only run sonarqube on linux and darwin during CI
  - shell@template|http|template: |-
      https://raw.githubusercontent.com/arhat-dev/dukkha-presets/master/
      {{- if eq env.HOST_KERNEL "linux" "darwin" -}}
        linter/sonar-scanner.tpl
      {{- else -}}
        empty.yml
      {{- end -}}
    continue_on_error: true

golang:test:
- name: rs
  __@template|http: |-
    https://raw.githubusercontent.com/arhat-dev/dukkha-presets/master/
    {{- /* line sep */ -}}
    golang/test/pkg.yml
  env:
  - name: PROFILE_DIR
    value: build/test-profile
  matrix:
    pkg@template: |-
      {{-
        eval.Shell "go list ./..."
        | removePrefix (eval.Shell "go list -m" | trimSuffix "\n")
        | addPrefix "- "
      -}}
  hooks:
    before:
    - shell: mkdir -p ${PROFILE_DIR}

- name: benchmark
  env:
  - name: PROFILE_DIR
    value: build/test-profile
  matrix:
    pkg:
    - ./
  chdir: ./benchmark
  hooks:
    before:
    - shell: mkdir -p ${PROFILE_DIR}
  cgo:
    enabled: true
  race: true
  profile:
    output_dir: build/test-profile
    coverage:
      enabled: true
    memory:
      enabled: true
    cpu:
      enabled: true
  benchmark:
    enabled: true
  json_output_file@template: |-
    {{ .Env.PROFILE_DIR }}/result-benchmark.json
  verbose: true
  path: ./
